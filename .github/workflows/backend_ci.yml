name: Continuous Integration - Backend

on:
  pull_request:
    branches:
      - main # Run the workflow only on pull requests to the main branch
    paths:
      - 'backend/**' # Workflow triggered on changes to code
      - '.github/workflows/backend_ci.yml'

jobs:
  image-dast:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Build Docker Image
      run: |
        docker build -t backend:latest .
        
    - name: Run Docker image with environment variables
      run: |
        docker run -d --name backend \
          -p 4000:4000 \
          -e DATABASE_TYPE=1 \
          -e DATABASE_CONNECTION_URL=postgres://postgres:postgres@localhost:5432/postgres \
          backend:latest

    - name: Check running docker container
      run: docker ps

    - name: Wait for 5 seconds
      run: sleep 5

    - name: Test health of docker container
      run: curl -f http://localhost:4000/products/health || exit 1

    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    - name: Start OWASP ZAP Scan
      run: |
        wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_Linux.tar.gz
        tar -xvzf ZAP_2.14.0_Linux.tar.gz
        cd ZAP_2.14.0
        ./zap.sh -daemon -port 8081 -host 0.0.0.0 -config api.disablekey=true

    - name: Run OWASP ZAP Scan
      run: |
        ./zap-api-scan.py -t http://localhost:4000 -f html -r report.html

    - name: Upload Scan Report
      uses: actions/upload-artifact@v2
      with:
        name: zap-scan-report
        path: report.html

  test-service:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - uses: dentarg/postgres@v1
    - run: psql < ./test/sql/init.sql
      env:
        DATABASE_URL: "${{ env.POSTGRES_URL }}" # or use POSTGRES_URL directly

    - name: Install dependencies
      run: npm install

    - name: Create env file
      run: |
        touch .env
        echo DATABASE_TYPE=1 >> .env
        echo DATABASE_CONNECTION_URL="${{ env.POSTGRES_URL }}" >> .env
        cat .env

    - name: Run tests
      run: npm run test
      

  code-quality:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: npm install

    - name: Lint Codebase
      run: npm run lint


  sast-scan:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./backend
    
    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: typescript

    - name: Analyze with CodeQL
      uses: github/codeql-action/analyze@v3


    - name: Get Pull Request Number
      id: pr-number
      run: echo "::set-output name=pr_number::$(echo ${{ github.event.pull_request.number }})"

    - name: Create Code Scanning Comment
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const prNumber = ${{ steps.pr-number.outputs.pr_number }};
          const repoOwner = context.repo.owner;
          const repoName = context.repo.repo;
          const commentBody = `Check out the Code Scanning results for this pull request [here](https://github.com/${repoOwner}/${repoName}/security/code-scanning?query=pr%3A${prNumber}+is%3Aopen)`;

          github.issues.createComment({
            owner: repoOwner,
            repo: repoName,
            issue_number: prNumber,
            body: commentBody
          });
